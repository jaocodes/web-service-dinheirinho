generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  BANK
  WALLET
}

enum TransactionType {
  EXPENSE
  INCOME
  CREDIT
  TRANSFER_IN
  TRANSFER_OUT
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String

  username String @unique
  email    String @unique
  password String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  account      Account[]
  transaction  Transaction[]
  refreshToken RefreshToken[]
  category     Category[]
  CreditCard   CreditCard[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  jti       String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Account {
  id             String      @id @default(uuid())
  userId         String
  name           String
  type           AccountType
  initialBalance Int         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[] @relation("AccountAsSource")
  transfers    Transaction[] @relation("AccountAsTarget")
  creditCards  CreditCard[]

  @@map("accounts")
}

model CreditCard {
  id         String   @id @default(uuid())
  name       String
  accountId  String
  userId     String
  limit      Int
  closingDay Int
  dueDay     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  account     Account       @relation(fields: [accountId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]

  @@map("credit_cards")
}

model Transaction {
  id              String          @id @default(uuid())
  userId          String
  accountId       String
  amount          Int
  description     String
  observations    String?
  type            TransactionType
  dueDate         DateTime
  effectived      Boolean         @default(false)
  isRecurring     Boolean         @default(false)
  recurrenceId    String?
  isFixed         Boolean         @default(false)
  fixedId         String?
  transferId      String?
  targetAccountId String?
  categoryId      Int
  creditCardId    String?
  invoiceDate     DateTime?
  installmentId   String?
  installmentNum  Int?
  installments    Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user          User        @relation(fields: [userId], references: [id])
  account       Account     @relation(name: "AccountAsSource", fields: [accountId], references: [id], onDelete: Cascade)
  targetAccount Account?    @relation(name: "AccountAsTarget", fields: [targetAccountId], references: [id], onDelete: NoAction) // Novo relacionamento
  category      Category    @relation(fields: [categoryId], references: [id])
  creditCard    CreditCard? @relation(fields: [creditCardId], references: [id])

  @@map("transactions")
}

model Category {
  id           Int             @id @default(autoincrement())
  name         String
  type         TransactionType
  userId       String?
  createdAt    DateTime        @default(now())
  transactions Transaction[]

  user User? @relation(fields: [userId], references: [id])

  @@map("categories")
}
