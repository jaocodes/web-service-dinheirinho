generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  BANK
  WALLET
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER_IN
  TRANSFER_OUT
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String

  username String @unique
  email    String @unique
  password String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  account     Account[]
  transaction Transaction[]

  @@map("users")
}

model Account {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id])
  name           String
  type           AccountType
  initialBalance Int         @default(0)
  currentBalance Int         @default(0)

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  transactions Transaction[] @relation("AccountAsSource")
  transfers    Transaction[] @relation("AccountAsTarget")

  @@map("accounts")
}

model Transaction {
  id              String          @id @default(uuid())
  userId          String
  accountId       String
  amount          Int
  description     String
  observations    String?
  type            TransactionType
  dueDate         DateTime
  effectived      Boolean         @default(false)
  isRecurring     Boolean         @default(false)
  recurrenceId    String?
  isFixed         Boolean         @default(false)
  fixedId         String?
  transferId      String?
  targetAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
  account       Account  @relation(name: "AccountAsSource", fields: [accountId], references: [id], onDelete: Cascade)
  targetAccount Account? @relation(name: "AccountAsTarget", fields: [targetAccountId], references: [id], onDelete: NoAction) // Novo relacionamento

  @@map("transactions")
}
